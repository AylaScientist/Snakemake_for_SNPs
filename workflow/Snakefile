#include: "rules/common.smk"

configfile: '../config/config.yaml'

print("Configfile: ")
print(config)

##### Target rules #####

import pandas as pd
import os

sample_names = pd.read_csv ( config['Sample_names'] )
pseudo_codes = pd.read_csv ( config['Pseudogenome_codes'])
# Create arrays of the sample names
samples = sample_names['Sample_name'].values
pseudos = pseudo_codes['PSGs'].values
print("Sample names: ")
print(samples)


rule all:
    input:
        o1 = config['results']['o1'],
        o2 = config['results']['o2'],
        o3 = config['results']['o3'],
        o4 = config['results']['o4'],
        o5 = config['results']['o5'],
        degs = expand("gene_counts/{sample}.count_ref.txt", sample = samples), # Counts matrix for the DEGs
        psgd = expand(config['files_pseudogenomes']['PSG_dict'], pseudo = pseudos), # Dictionary of the pseudogenomes
        psgi = expand(config['files_pseudogenomes']['PSG_index'], pseudo = pseudos), # Index of the pseudogenomes
        psgf = expand(config['files_pseudogenomes']['PSG_fai'], sample = samples, pseudo = pseudos), # fai index of the pseudogenomes
        #error = config['error'], # Estimate the error of your SNP call if you have genomic data with known SNPs
        #bam = config['Other_intermediate_files']['bam'],
        #bqsr = config['Other_intermediate_files']['bqsr'],
        #val_bqsr = config['Other_intermediate_files']['valid_bqsr'],
        #val_psg = config['Other_intermediate_files']['valid_bqsr_PSG'],
        #recal = config['Other_intermediate_files']['recal_table']


##### MODULES #####
###################

# Preparation #
###############
ends = config['params']['star']['mode'] #Information about paired ends
print(ends)

if ends == "SE":
    include: "rules/trimmomatic_se.smk"#In the trimming R3 input is called 2 for the output
    include: "rules/star_gi_ref.smk"
    # First SNP callling on the reference genome #
    ##############################################
    include: "rules/star_se_ref.smk"        # map with STAR
else:
    include: "rules/trimmomatic_pe.smk"#In the trimming R3 input is called 2 for the output
    include: "rules/star_gi_ref.smk"
    # First SNP callling on the reference genome #
    ##############################################
    include: "rules/star_pe_ref.smk"        # map with STAR

include: "rules/replace_rg_ref.smk"     # Replace or add read Groups
include: "rules/mark_duplicates_ref.smk"# Mark and eliminate Duplicates
include: "rules/splitNcigar_ref.smk"    # Split Ncigars
inlcude: "rules/validate_bam_ref.smk"   # Validate bam
include: "rules/htseq.smk"              # Make count matrix from each sample for differentially expressed genes
include: "rules/haplotype_caller_ref.smk"# Haplotype caller
include: "rules/combine_gvcfs.smk"      # Combine gvcf
include: "rules/genotype_gvcfs.smk"     # Genotype gvcf
include: "rules/gatk_select.smk"        # Select biallelic sites
include: "rules/gatk_variantstotable.smk" # Make the table


## Creation of Pseudogenomes ##
###############################
# From here it starts the part of the pipeline that creates the pseudogenomes
# and prepares the vcf files for the elimination of the mapping bias.

# Subset by keeping positions with GQ >= 30 and DP >=5
# Not keeping indels
include: "rules/subset_ref.smk"         # Subset the genome
include: "rules/pseudogenomes.smk"      # Create the Pseudogenomes


## Second calling of SNPs on the pseudogenomes ##
#################################################
## Now you can start the pipeline again from the fastq file for the pseudogenomes:

if ends == "SE":
    include: "rules/star_se_pseudogenomes.smk"        # map with STAR
else:
    include: "rules/star_pe_pseudogenomes.smk"        # map with STARinclude: "rules/star_pseudogenomes.smk"       # Map against pseudogenomes


include: "rules/replace_rg_pseudo.smk"        # Replace or add read groups
include: "rules/mark_duplicates_pseudo.smk"   # Mark and eliminate duplicates
include: "rules/splitNcigar_pseudo.smk"       # Split Ncigars
include: "rules/validate_bam_pseudo.smk"      # Validate bam
include: "rules/haplotype_caller_pseudo.smk"  # Haplotype caller
include: "rules/combine_gvcfs_pseudo.smk"     # Combine gvcf
include: "rules/genotype_gvcfs_pseudo.smk"    # Genotype gvcf
include: "rules/select_pseudo.smk"            # Select biallelic variants


## Annotate vcf files ##
########################
# Convert the vcf file to annovar format thus extracting the SNPs
# Make tokens for the annotation script
# Collect the annotations in the db
# Make tokens for the tables with the annotation
# Annotate the file. This file can be used for the creation of the pseudogenomes
include: "rules/annotation.smk"

## Data science ##
##################
## Create the count table for the data wrangling
include: "rules/variants_to_table.smk"  # Make the table
include: "rules/table2df.smk"           # Preapre the tables for the workflow format

# Workflow
include: "rules/workflow.smk"           # Processing the data
include: "rules/stats.smk"              # Apply Chi^2, Fisher and Binomial on NO MAE

# Tables and figures for publication
include: "rules/results.smk"
include: "rules/results_mae.smk"        # For study of the SNPs in MAE
